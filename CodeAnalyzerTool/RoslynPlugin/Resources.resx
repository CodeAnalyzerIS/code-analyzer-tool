<?xml version="1.0" encoding="utf-8"?>

<root>
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:element name="root" msdata:IsDataSet="true">
            
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>1.3</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <data name="TestMethodWithoutAssertion_Description" xml:space="preserve">
        <value>Detects whether a test method contains any assertion statements like Assert.Equals(), Assert.True(), etc. Supports only NUnit tests marked with a [Test] attribute.</value>
    </data>
    <data name="TestMethodWithoutAssertion_MessageFormat" xml:space="preserve">
        <value>Test method '{0}' does not contain any assertions</value>
    </data>
    <data name="TestMethodWithoutAssertion_Title" xml:space="preserve">
        <value>Test method should contain at least one assertion</value>
    </data>
    <data name="NamespaceContains_Description" xml:space="preserve">
        <value>Detects whether a namespace contains the configured substring. This rule is used for enforcing that all namespaces in your project contain for a certain string (configurable in options).</value>
    </data>
    <data name="NamespaceContains_Title" xml:space="preserve">
        <value>Namespaces should contain the configured substring</value>
    </data>
    <data name="NamespaceContains_MessageFormat" xml:space="preserve">
        <value>Namespace should contain '{0}'</value>
    </data>
    <data name="RequireBracesInBlock_Description" xml:space="preserve">
        <value>Detects whether a code block uses a single line statement format without curly braces. This rule purely checks formatting of code, it does not indicate any code smell or mistake. This rule is meant for enforcing a certain code style (requiring braces for all code blocks).</value>
    </data>
    <data name="RequireBracesInBlock_MessageFormat" xml:space="preserve">
        <value>'{' brace expected</value>
    </data>
    <data name="RequireBracesInBlock_Title" xml:space="preserve">
        <value>Enclose code block with curly braces</value>
    </data>
    <data name="MakeLocalVariableConstantTitle" xml:space="preserve">
        <value>Local variable should be made constant</value>
    </data>
    <data name="MakeLocalVariableConstantDescription" xml:space="preserve">
        <value>Detects whether a local variable can be made a constant. This rule shows for which local variables the 'const' keyword can be utilized. It is recommended to change all unchanging variable to constants for code readability and maintanability.</value>
    </data>
    <data name="MakeLocalVariableConstantMessageFormat" xml:space="preserve">
        <value>Local variable should be made constant</value>
    </data>
    <data name="UnnecessaryTypeCastTitle" xml:space="preserve">
        <value>Remove unnecessary typecast</value>
    </data>
    <data name="UnnecessaryTypeCastMessageFormat" xml:space="preserve">
        <value>Remove unnecessary typecast</value>
    </data>
    <data name="UnnecessaryTypeCastDescription" xml:space="preserve">
        <value>Detects whether an unnecessary typecast has been made to access a member (property, method, etc.). The type cast can be removed without any repercussions, and should be removed for maintainability sake.</value>
    </data>
</root>